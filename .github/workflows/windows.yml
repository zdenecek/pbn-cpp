name: Build and test on Windows

on:
  workflow_dispatch:
  push:
    branches:
      - ci

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Windows Latest MSVC", id: msvc, artifact: "Windows-MSVC.tar.xz",
            os: windows-latest,
            build_type: "Release",cc: "cl",cxx: "cl", generator: "Visual Studio 17 2022",
            environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat"
        }
        - { 
            name: "Windows Latest MinGW", id: mingw, artifact: "Windows-MinGW.tar.xz",
            os: windows-latest, 
            build_type: "Release", cc: "gcc", cxx: "g++", generator: "MinGW Makefiles",
          }
        
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v1.13
        with:
          cmake-version: '3.23.x'
      - name: Run platform specific setup
        shell: cmake -P {0}
        run: |
            if ("${{ runner.os }}" STREQUAL "Windows" AND NOT "x${{ matrix.config.environment_script }}" STREQUAL "x")
            execute_process(
              COMMAND "${{ matrix.config.environment_script }}" && set
              OUTPUT_FILE environment_script_output.txt
            )
            file(STRINGS environment_script_output.txt output_lines)
            foreach(line IN LISTS output_lines)
              if (line MATCHES "^([a-zA-Z0-9_-]+)=(.*)$")
                set(ENV{${CMAKE_MATCH_1}} "${CMAKE_MATCH_2}")
              endif()
            endforeach()
            endif()
     
      - name: Cache Boost
        uses: actions/cache@v2
        with:
          path: '${{ runner.workspace }}/boost_*.tar.gz'
          key: 'boost-1.79.0'              
      # - name: Install Boost
      #   id: boost
      #   continue-on-error: true
      #   uses: egor-tensin/build-boost@v1
      #   with:
      #     version: 1.79.0
      #     libraries: filesystem program_options test system
      #     platform: x64
      #     toolset: ${{ matrix.config.id }}
      #     configuration: Release
      #     static: static
      - name: Install Boost
        uses: MarkusJx/install-boost@v2.4.1
        id: install-boost
        with:
            # REQUIRED: Specify the required boost version
            # A list of supported versions can be found here:
            # https://github.com/MarkusJx/prebuilt-boost/blob/main/versions-manifest.json
            boost_version: 1.79.0
            toolset: msvc
      - run: cat ${{ steps.boost.outputs.root }}/bootstrap.log
        continue-on-error: true
      - name: CMake Configure 
        continue-on-error: true
        run: |
          mkdir build
          cd build
          cmake .. -G "${{ matrix.config.generator }}" -DBoost_USE_STATIC_LIBS=ON -DBOOST_LIBRARYDIR=DBOOST_ROOT=${{steps.boost.outputs.librarydir}} -DBOOST_ROOT=${{steps.boost.outputs.root}} -DBoost_DEBUG=ON -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }} -DCMAKE_C_COMPILER=${{ matrix.config.cc }} -DCMAKE_CXX_COMPILER=${{ matrix.config.cxx }}
      - name: CMake Build
        continue-on-error: true
        run: cmake --build build --config ${{ matrix.config.build_type }} --target test
      - name: Print CMakeOutput.log
        run: cat D:/a/pbn/pbn/build/CMakeFiles/CMakeOutput.log  
      - name: Test
        run: |
          cd build
          ./pbn_test